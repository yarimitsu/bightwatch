class Cache{constructor(){this.storage=window.localStorage,this.prefix="bightwatch_"}set(t,e,s=30){const n={data:e,expiry:Date.now()+60*s*1e3,timestamp:Date.now()};try{this.storage.setItem(this.prefix+t,JSON.stringify(n))}catch(t){console.warn("Cache storage failed:",t)}}get(t){try{const e=this.storage.getItem(this.prefix+t);if(!e)return null;const s=JSON.parse(e);return Date.now()>s.expiry?(this.remove(t),null):s.data}catch(t){return console.warn("Cache retrieval failed:",t),null}}remove(t){try{this.storage.removeItem(this.prefix+t)}catch(t){console.warn("Cache removal failed:",t)}}clear(){try{Object.keys(this.storage).forEach(t=>{t.startsWith(this.prefix)&&this.storage.removeItem(t)})}catch(t){console.warn("Cache clear failed:",t)}}getStats(){const t=Object.keys(this.storage).filter(t=>t.startsWith(this.prefix));let e=0,s=0,n=0;return t.forEach(t=>{const i=this.storage.getItem(t);if(i){e+=i.length;try{const t=JSON.parse(i);Date.now()>t.expiry?n++:s++}catch(t){n++}}}),{totalItems:t.length,validItems:s,expiredItems:n,totalSize:e,sizeKB:Math.round(e/1024)}}cleanup(){Object.keys(this.storage).filter(t=>t.startsWith(this.prefix)).forEach(t=>{try{const e=this.storage.getItem(t);if(e){const s=JSON.parse(e);Date.now()>s.expiry&&this.storage.removeItem(t)}}catch(e){this.storage.removeItem(t)}})}}window.BightWatch=window.BightWatch||{},window.BightWatch.cache=new Cache,window.addEventListener("load",()=>{window.BightWatch.cache.cleanup()});class HttpClient{constructor(){this.cache=window.BightWatch.cache,this.baseTimeout=1e4}async get(t,e={}){const{cacheTTL:s=30,skipCache:n=!1,timeout:i=this.baseTimeout,retries:r=3}=e,o=this.getCacheKey(t);if(!n){const t=this.cache.get(o);if(t)return t}let a;for(let e=0;e<r;e++)try{const e=await this.fetchWithTimeout(t,i);return s>0&&this.cache.set(o,e,s),e}catch(t){a=t,e<r-1&&await this.delay(1e3*Math.pow(2,e))}throw a}async fetchWithTimeout(t,e){const s=new AbortController,n=setTimeout(()=>s.abort(),e);try{const e=await fetch(t,{signal:s.signal,headers:{Accept:"application/json,text/plain","Cache-Control":"no-cache"}});if(clearTimeout(n),!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const i=e.headers.get("content-type");return i&&i.includes("application/json")?await e.json():await e.text()}catch(t){if(clearTimeout(n),"AbortError"===t.name)throw new Error("Request timeout");throw t}}getCacheKey(t){return"http_"+btoa(t).replace(/[^a-zA-Z0-9]/g,"")}delay(t){return new Promise(e=>setTimeout(e,t))}async isAccessible(t){try{await fetch(t,{method:"HEAD",mode:"no-cors"});return!0}catch{return!1}}getRequestStatus(t){const e=this.getCacheKey(t),s=this.cache.get(e);return{url:t,cached:!!s,cacheKey:e,timestamp:s?(new Date).toISOString():null}}}window.BightWatch=window.BightWatch||{},window.BightWatch.http=new HttpClient;class ForecastParser{constructor(){this.windDirections={N:"North",NNE:"North-Northeast",NE:"Northeast",ENE:"East-Northeast",E:"East",ESE:"East-Southeast",SE:"Southeast",SSE:"South-Southeast",S:"South",SSW:"South-Southwest",SW:"Southwest",WSW:"West-Southwest",W:"West",WNW:"West-Northwest",NW:"Northwest",NNW:"North-Northwest",VAR:"Variable",VRB:"Variable"},this.windDescriptions={LT:"Light",LIGHT:"Light",MOD:"Moderate",MODERATE:"Moderate",FRESH:"Fresh",STRONG:"Strong",GALE:"Gale",STORM:"Storm"}}parseCWF(t){if(!t||"string"!=typeof t)throw new Error("Invalid forecast text");const e=t.split("\n").map(t=>t.trim()).filter(t=>t),s={zone:null,zoneName:null,office:null,issued:null,periods:[],raw:t};return this.parseHeader(e,s),this.parseForecastPeriods(e,s),s}parseHeader(t,e){t.slice(0,10).forEach(t=>{if(t.includes("COASTAL WATERS FORECAST")||t.includes("MARINE WEATHER STATEMENT")){const s=t.match(/PK(Z\d+)/);s&&(e.zone="PK"+s[1])}if(t.includes("NATIONAL WEATHER SERVICE")){const s=t.match(/NATIONAL WEATHER SERVICE\s+(\w+)/);s&&(e.office=s[1])}t.match(/\d{3,4}\s+(AM|PM)\s+\w+\s+\w+\s+\d{1,2}\s+\d{4}/)&&(e.issued=this.parseDateTime(t))})}parseForecastPeriods(t,e){let s=null,n=!1;t.forEach(t=>{const i=t.match(/^\.?(TODAY|TONIGHT|TOMORROW|FRIDAY|SATURDAY|SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY)\.?\.?\.?/i);if(i)return s&&e.periods.push(this.processPeriod(s)),s={name:i[1].toUpperCase(),text:t,wind:null,waves:null,weather:null},void(n=!0);n&&s&&(!t||t.includes("$$")||t.includes("FORECAST")||t.includes("SYNOPSIS")||(s.text+=" "+t))}),s&&e.periods.push(this.processPeriod(s))}processPeriod(t){return{name:t.name,text:t.text.trim(),wind:this.parseWind(t.text),waves:this.parseWaves(t.text),weather:this.parseWeather(t.text),summary:this.generateSummary(t.text)}}parseWind(t){const e=[/WIND[S]?\s+([A-Z]{1,3})\s+(\d+)(?:\s*TO\s*(\d+))?\s*KT/i,/([A-Z]{1,3})\s+(?:WIND[S]?\s+)?(\d+)(?:\s*TO\s*(\d+))?\s*KT/i,/WIND[S]?\s+(\d+)(?:\s*TO\s*(\d+))?\s*KT\s+([A-Z]{1,3})/i];for(const s of e){const e=t.match(s);if(e){const t=e[1]||e[3],s=parseInt(e[2]),n=e[3]?parseInt(e[3]):null;return{direction:t.toUpperCase(),directionName:this.windDirections[t.toUpperCase()]||t,speed:s,maxSpeed:n,description:this.getWindDescription(s),raw:e[0]}}}return null}parseWaves(t){const e=[/WAVES?\s+(\d+)(?:\s*TO\s*(\d+))?\s*FT/i,/SEAS?\s+(\d+)(?:\s*TO\s*(\d+))?\s*FT/i,/(\d+)(?:\s*TO\s*(\d+))?\s*FT\s+WAVES?/i];for(const s of e){const e=t.match(s);if(e){const t=parseInt(e[1]);return{height:t,maxHeight:e[2]?parseInt(e[2]):null,description:this.getWaveDescription(t),raw:e[0]}}}return null}parseWeather(t){const e=[];return["RAIN","SHOWERS","DRIZZLE","SNOW","SLEET","HAIL","THUNDERSTORMS","FOG","MIST","HAZE","SMOKE","CLEAR","SUNNY","PARTLY CLOUDY","MOSTLY CLOUDY","OVERCAST","VISIBILITY","FREEZING"].forEach(s=>{t.toUpperCase().includes(s)&&e.push(s)}),0===e.length?null:{conditions:e,description:this.getWeatherDescription(e),raw:e.join(", ")}}generateSummary(t){const e=this.parseWind(t),s=this.parseWaves(t),n=this.parseWeather(t);let i="";return e&&(i+=`${e.description} ${e.directionName.toLowerCase()} winds at ${e.speed}${e.maxSpeed?"-"+e.maxSpeed:""} knots. `),s&&(i+=`${s.description} seas ${s.height}${s.maxHeight?"-"+s.maxHeight:""} feet. `),n&&(i+=`${n.description}.`),i.trim()||"Conditions as described in forecast."}getWindDescription(t){return t<7?"Light":t<17?"Moderate":t<27?"Fresh":t<34?"Strong":t<48?"Gale":"Storm"}getWaveDescription(t){return t<2?"Calm":t<4?"Light":t<6?"Moderate":t<10?"Rough":"Very rough"}getWeatherDescription(t){return t.includes("THUNDERSTORMS")?"Thunderstorms possible":t.includes("RAIN")||t.includes("SHOWERS")?"Rain expected":t.includes("FOG")?"Fog possible":t.includes("CLEAR")||t.includes("SUNNY")?"Clear conditions":"Weather conditions as described"}parseDateTime(t){try{const e=t.match(/(\d{3,4})\s+(AM|PM)\s+(\w+)\s+(\w+)\s+(\d{1,2})\s+(\d{4})/);if(e){const[,t,s,n,i,r,o]=e;return new Date}}catch(t){console.warn("Date parsing failed:",t)}return new Date}}window.BightWatch=window.BightWatch||{},window.BightWatch.parser=new ForecastParser;class LocationSelector{constructor(t,e){this.zones=t,this.onSelection=e,this.selectedRegion=null,this.container=document.getElementById("location-selector"),this.regionDropdown=document.getElementById("region-dropdown"),this.init()}init(){this.setupEventListeners(),this.populateRegionDropdown()}setupEventListeners(){this.regionDropdown&&this.regionDropdown.addEventListener("change",t=>{const e=t.target.value;e?this.selectRegion(e):this.clearSelection()})}populateRegionDropdown(){if(console.log("LocationSelector.populateRegionDropdown called"),console.log("this.regionDropdown:",this.regionDropdown),console.log("this.zones:",this.zones),!this.regionDropdown)return void console.error("Region dropdown element not found");if(!this.zones||!this.zones.regions)return void console.error("No zones.regions data available:",this.zones);const t=Object.entries(this.zones.regions);console.log("Regions to populate:",t),this.regionDropdown.innerHTML='<option value="">Select a region...</option>',t.forEach(([t,e])=>{console.log(`Adding region: ${t} - ${e.name}`);const s=document.createElement("option");s.value=t,s.textContent=e.name,this.regionDropdown.appendChild(s)}),console.log("Region dropdown populated with",t.length,"regions")}selectRegion(t){this.zones.regions[t]?(this.selectedRegion=t,this.regionDropdown&&(this.regionDropdown.value=t),this.onSelection&&this.onSelection(t)):console.error("Invalid region ID:",t)}setSelected(t){this.selectRegion(t)}getSelected(){return this.selectedRegion}clearSelection(){this.selectedRegion=null,this.regionDropdown&&(this.regionDropdown.value="")}getRegionData(t){return this.zones.regions[t]||null}updateZones(t){this.zones=t,this.populateRegionDropdown()}}"undefined"!=typeof window&&(window.LocationSelector=LocationSelector);class ForecastSummary{constructor(){this.container=document.getElementById("forecast-summary"),this.content=this.container.querySelector(".forecast-content"),this.zoneDropdown=document.getElementById("zone-dropdown"),this.forecastDisplay=this.container.querySelector(".forecast-display"),this.currentData=null,this.currentRegion=null,this.selectedZone=null,this.init()}init(){this.showLoading(),this.setupEventListeners()}setupEventListeners(){this.zoneDropdown&&this.zoneDropdown.addEventListener("change",t=>{const e=t.target.value;this.selectZone(e)})}updateRegion(t,e){this.currentRegion=t,this.currentData=e,this.populateZoneDropdown(),this.showLoading("Select a specific zone to view forecast")}populateZoneDropdown(){this.zoneDropdown&&this.currentRegion&&(this.zoneDropdown.innerHTML='<option value="">Select a zone...</option>',Object.entries(this.currentRegion.zones).forEach(([t,e])=>{const s=document.createElement("option");s.value=t,s.textContent=`${t} - ${e}`,this.zoneDropdown.appendChild(s)}))}selectZone(t){t&&this.currentData?(this.selectedZone=t,this.renderZoneForecast(t)):this.showLoading("Select a zone to view forecast")}update(t){this.currentData=t,this.render()}render(){if(!this.currentData)return void this.showLoading();const{zoneName:t,issued:e,periods:s}=this.currentData;if(!s||0===s.length)return void this.showError("No forecast periods available");const n=s[0],i=`\n            <div class="forecast-header">\n                <div class="forecast-location">${n.stationName||t}</div>\n                <div class="forecast-updated">${n.issueTime||this.formatDate(e)}</div>\n                <div class="forecast-link">\n                    <a href="https://www.ndbc.noaa.gov/data/Forecasts/FZAK51.PAJK.html" target="_blank" rel="noopener">\n                        View All Alaska Marine Forecasts →\n                    </a>\n                </div>\n            </div>\n            <div class="forecast-periods">\n                ${s.map(t=>this.renderPeriod(t)).join("")}\n            </div>\n        `;this.content.innerHTML=i}renderPeriod(t){const{name:e,text:s}=t;return`\n            <div class="forecast-period">\n                <div class="period-name">${e}</div>\n                <div class="period-text">${s}</div>\n            </div>\n        `}renderWind(t){return`\n            <div class="wind-info">\n                <div class="wind-direction">${t.directionName}</div>\n                <div class="wind-speed">${t.speed}${t.maxSpeed?"-"+t.maxSpeed:""} kt</div>\n                <div class="wind-description">${t.description}</div>\n            </div>\n        `}renderWaves(t){return`\n            <div class="wave-info">\n                <div class="wave-height">${t.height}${t.maxHeight?"-"+t.maxHeight:""} ft</div>\n                <div class="wave-period">${t.description}</div>\n            </div>\n        `}renderWeather(t){return`\n            <div class="weather-info">\n                <div class="weather-conditions">${t.conditions.join(", ")}</div>\n                <div class="weather-description">${t.description}</div>\n            </div>\n        `}getPeriodTime(t){new Date;return{TODAY:"Today",TONIGHT:"Tonight",TOMORROW:"Tomorrow",FRIDAY:"Friday",SATURDAY:"Saturday",SUNDAY:"Sunday",MONDAY:"Monday",TUESDAY:"Tuesday",WEDNESDAY:"Wednesday",THURSDAY:"Thursday"}[t]||t}formatDate(t){if(!t)return"Unknown";try{const e=new Date,s=Math.floor((e-t)/6e4);return s<60?`${s} minutes ago`:s<1440?`${Math.floor(s/60)} hours ago`:t.toLocaleDateString()}catch(t){return"Unknown"}}renderZoneForecast(t){if(!this.currentData||!this.currentData.properties||!this.currentData.properties.periods)return void this.showError("No forecast data available");const e=this.currentData.properties.periods[0].detailedForecast,s=this.extractZoneForecast(e,t);if(!s)return void this.showError(`Forecast for ${t} not found in current data`);const n=`\n            <div class="forecast-header">\n                <div class="forecast-location">${t} - ${this.currentRegion?.zones[t]||t}</div>\n                <div class="forecast-updated">Updated: ${this.formatDate(new Date(this.currentData.properties.updated))}</div>\n            </div>\n            <div class="zone-forecast">\n                <pre class="forecast-text">${s}</pre>\n            </div>\n        `;this.forecastDisplay?this.forecastDisplay.innerHTML=n:this.content.innerHTML=n}extractZoneForecast(t,e){const s=t.split("\n");let n=-1,i=-1;for(let t=0;t<s.length;t++)if(s[t].includes(e)){n=t;break}if(-1===n)return null;for(let t=n+1;t<s.length;t++)if(s[t].match(/PKZ\d{3}/)){i=t;break}return-1===i&&(i=s.length),s.slice(n,i).join("\n").trim()}showLoading(t="Loading forecast..."){(this.forecastDisplay||this.content).innerHTML=`<div class="loading">${t}</div>`}showError(t){this.content.innerHTML=`\n            <div class="status-message status-error">\n                <strong>Error:</strong> ${t}\n            </div>\n        `}clear(){this.currentData=null,this.content.innerHTML='<div class="loading">Select a zone to view forecast</div>'}getData(){return this.currentData}exportAsText(){if(!this.currentData)return"";const{zoneName:t,issued:e,periods:s}=this.currentData;let n=`Marine Forecast for ${t}\n`;return n+=`Updated: ${this.formatDate(e)}\n\n`,s.forEach(t=>{n+=`${t.name}:\n`,n+=`${t.summary}\n\n`}),n}isCurrent(){if(!this.currentData||!this.currentData.issued)return!1;return(new Date-new Date(this.currentData.issued))/36e5<12}}"undefined"!=typeof window&&(window.ForecastSummary=ForecastSummary);class Discussion{constructor(){this.container=document.getElementById("discussion"),this.content=this.container.querySelector(".discussion-content"),this.currentData=null,this.init()}init(){this.showLoading()}update(t){this.currentData=t,this.render()}render(){if(!this.currentData)return void this.showLoading();const{office:t,text:e,issued:s}=this.currentData;if(!e)return void this.showError("No discussion available");const n=`\n            <div class="discussion-header">\n                <div class="discussion-office">${t} Forecast Office</div>\n                <div class="discussion-issued">${this.formatDate(s)}</div>\n            </div>\n            <div class="discussion-text">${this.formatText(e)}</div>\n        `;this.content.innerHTML=n}formatText(t){return t?t.replace(/\n\n/g,"</p><p>").replace(/\n/g,"<br>").replace(/^(.+)$/,"<p>$1</p>"):""}formatDate(t){if(!t)return"Unknown";try{return new Date(t).toLocaleDateString("en-US",{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"})}catch(t){return"Unknown"}}showLoading(){this.content.innerHTML='<div class="loading">Loading discussion...</div>'}showError(t){this.content.innerHTML=`\n            <div class="status-message status-error">\n                <strong>Error:</strong> ${t}\n            </div>\n        `}clear(){this.currentData=null,this.content.innerHTML='<div class="loading">Loading discussion...</div>'}}"undefined"!=typeof window&&(window.Discussion=Discussion);class Alerts{constructor(){this.container=document.getElementById("alerts"),this.content=this.container.querySelector(".alerts-content"),this.currentData=null,this.init()}init(){this.showNoAlerts()}update(t){this.currentData=t,this.render()}render(){if(!this.currentData||!this.currentData.features||0===this.currentData.features.length)return void this.showNoAlerts();const t=this.currentData.features.filter(t=>this.isMarineAlert(t.properties));if(0===t.length)return void this.showNoAlerts();const e=t.map(t=>this.renderAlert(t.properties)).join("");this.content.innerHTML=e}isMarineAlert(t){const e=(t.headline+" "+t.event).toLowerCase();return["marine","coastal","wind","wave","surf","tide","storm"].some(t=>e.includes(t))}renderAlert(t){const{headline:e,event:s,severity:n,urgency:i,onset:r,expires:o,description:a}=t;return`\n            <div class="alert-item ${this.getAlertClass(n)}">\n                <div class="alert-header">\n                    <div class="alert-title">${e||s}</div>\n                    <div class="alert-severity">${n}</div>\n                </div>\n                <div class="alert-time">\n                    ${this.formatAlertTime(r,o)}\n                </div>\n                <div class="alert-description">\n                    ${this.formatDescription(a)}\n                </div>\n            </div>\n        `}getAlertClass(t){switch(t?.toLowerCase()){case"extreme":return"emergency";case"severe":return"warning";case"moderate":return"watch";default:return"advisory"}}formatAlertTime(t,e){const s=new Date;let n="";if(t){const e=new Date(t);n+=e>s?`Begins: ${this.formatDate(e)}`:`Active since: ${this.formatDate(e)}`}if(e){const t=new Date(e);n&&(n+=" • "),n+=`Expires: ${this.formatDate(t)}`}return n||"Time not specified"}formatDescription(t){return t?t.length>300?t.substring(0,300)+"...":t:""}formatDate(t){if(!t)return"Unknown";try{return new Date(t).toLocaleDateString("en-US",{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"})}catch(t){return"Unknown"}}showNoAlerts(){this.content.innerHTML='<div class="no-alerts">No active marine alerts</div>'}showLoading(){this.content.innerHTML='<div class="loading">Loading alerts...</div>'}showError(t){this.content.innerHTML=`\n            <div class="status-message status-error">\n                <strong>Error:</strong> ${t}\n            </div>\n        `}clear(){this.currentData=null,this.showNoAlerts()}getActiveCount(){return this.currentData&&this.currentData.features?this.currentData.features.filter(t=>this.isMarineAlert(t.properties)).length:0}}"undefined"!=typeof window&&(window.Alerts=Alerts);class Tides{constructor(){this.container=document.getElementById("tides"),this.content=this.container.querySelector(".tides-content"),this.dropdown=document.getElementById("tide-station-dropdown"),this.dataContainer=this.container.querySelector(".tide-data-container"),this.currentData=null,this.tideStations=null,this.init()}async init(){await this.loadTideStations(),this.populateDropdown(),this.setupEventListeners()}async loadTideStations(){try{const t=await window.BightWatch.http.get("./data/tide-stations.json",{cacheTTL:1440});this.tideStations="string"==typeof t?JSON.parse(t):t}catch(t){console.error("Failed to load tide stations:",t),this.tideStations={}}}populateDropdown(){if(!this.dropdown||!this.tideStations)return;const t=Object.entries(this.tideStations);t.sort((t,e)=>t[1].name.localeCompare(e[1].name)),t.forEach(([t,e])=>{const s=document.createElement("option");s.value=t,s.textContent=e.name,this.dropdown.appendChild(s)})}setupEventListeners(){this.dropdown&&this.dropdown.addEventListener("change",t=>{const e=t.target.value;e?this.loadTideData(e):this.showDefault()})}async loadTideData(t){if(this.tideStations[t]){this.showLoading();try{const e=(new Date).toISOString().split("T")[0].replace(/-/g,""),s=`https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?begin_date=${e}&end_date=${e}&station=${t}&product=predictions&datum=MLLW&time_zone=lst_ldt&units=english&format=json`,n=await window.BightWatch.http.get(s,{cacheTTL:1440});this.currentData=n,this.render(t)}catch(t){console.error("Failed to load tide data:",t),this.showError("Tide data not available")}}}showDefault(){this.dataContainer.innerHTML='<div class="loading">Select a tide station to view data</div>'}update(t){this.currentData=t,this.render()}render(t=null){if(!this.currentData||!this.currentData.predictions)return void this.showError("No tide data available");const e=this.processTideData(this.currentData.predictions);if(0===e.length)return void this.showError("No tide events found");const s=`\n            <div class="tide-station">\n                <div class="tide-station-name">${t?this.tideStations[t].name:"Unknown Station"}</div>\n                <div class="tide-events">\n                    ${e.map(t=>this.renderTideEvent(t)).join("")}\n                </div>\n            </div>\n        `;this.dataContainer.innerHTML=s}processTideData(t){if(!t||0===t.length)return[];const e=[],s=new Date,n=new Date(s.getTime()+864e5);return t.forEach((i,r)=>{const o=new Date(i.t),a=parseFloat(i.v);if(o>=s&&o<=n){const s=t[r-1],n=t[r+1];if(s&&n){const t=parseFloat(s.v),i=parseFloat(n.v),r=a>t&&a>i;(r||a<t&&a<i)&&e.push({time:o,height:a,type:r?"high":"low"})}}}),e.slice(0,8)}renderTideEvent(t){const{time:e,height:s,type:n}=t;return`\n            <div class="tide-event ${n}">\n                <div class="tide-type">${n} tide</div>\n                <div class="tide-time">${this.formatTime(e)}</div>\n                <div class="tide-height">${s.toFixed(1)} ft</div>\n            </div>\n        `}getStationName(){return"Tide Station"}formatTime(t){if(!t)return"Unknown";try{return new Date(t).toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",hour12:!0})}catch(t){return"Unknown"}}showLoading(){this.dataContainer.innerHTML='<div class="loading">Loading tide data...</div>'}showError(t){this.dataContainer.innerHTML=`\n            <div class="status-message status-error">\n                <strong>Error:</strong> ${t}\n            </div>\n        `}clear(){this.currentData=null,this.showDefault()}getNextTide(){if(!this.currentData||!this.currentData.predictions)return null;const t=this.processTideData(this.currentData.predictions);return t.length>0?t[0]:null}}"undefined"!=typeof window&&(window.Tides=Tides);class Observations{constructor(){this.container=document.getElementById("observations"),this.content=this.container.querySelector(".observations-content"),this.currentData=null,this.init()}init(){this.showLoading()}update(t){this.currentData=t,this.render()}render(){if(!this.currentData||0===this.currentData.length)return void this.showError("No observation data available");const t=`\n            <div class="observation-stations">\n                ${this.currentData.map(t=>this.renderStation(t)).join("")}\n            </div>\n        `;this.content.innerHTML=t}renderStation(t){const e=this.parseObservationData(t);return e?`\n            <div class="observation-station">\n                <div class="station-header">\n                    <div class="station-name">${e.stationName}</div>\n                    <div class="station-time">${this.formatTime(e.time)}</div>\n                </div>\n                <div class="observation-data">\n                    ${this.renderObservationItems(e.data)}\n                </div>\n            </div>\n        `:'<div class="status-message status-error">Failed to parse observation data</div>'}parseObservationData(t){if(!t||"string"!=typeof t)return null;const e=t.split("\n").filter(t=>t.trim());if(e.length<2)return null;const s=e[0],n=e[e.length-1];try{const t=s.match(/Station\s+(\w+)/i),e=t?t[1]:"Unknown Station",i=n.split(/\s+/);return{stationName:e,time:new Date,data:{windSpeed:i[6]||"N/A",windDirection:i[5]||"N/A",waveHeight:i[8]||"N/A",wavePeriod:i[9]||"N/A",pressure:i[12]||"N/A",temperature:i[13]||"N/A"}}}catch(t){return console.error("Failed to parse observation data:",t),null}}renderObservationItems(t){return[{label:"Wind Speed",value:t.windSpeed,unit:"kt"},{label:"Wind Dir",value:t.windDirection,unit:"°"},{label:"Wave Height",value:t.waveHeight,unit:"ft"},{label:"Wave Period",value:t.wavePeriod,unit:"s"},{label:"Pressure",value:t.pressure,unit:"mb"},{label:"Air Temp",value:t.temperature,unit:"°F"}].map(t=>`\n            <div class="observation-item">\n                <div class="observation-label">${t.label}</div>\n                <div class="observation-value">\n                    ${t.value}\n                    <span class="observation-unit">${t.unit}</span>\n                </div>\n            </div>\n        `).join("")}formatTime(t){if(!t)return"Unknown";try{const e=new Date,s=Math.floor((e-t)/6e4);return s<60?`${s} min ago`:s<1440?`${Math.floor(s/60)} hr ago`:t.toLocaleDateString()}catch(t){return"Unknown"}}showLoading(){this.content.innerHTML='<div class="loading">Loading observations...</div>'}showError(t){this.content.innerHTML=`\n            <div class="status-message status-error">\n                <strong>Error:</strong> ${t}\n            </div>\n        `}clear(){this.currentData=null,this.content.innerHTML='<div class="loading">Loading observations...</div>'}getLatest(){return this.currentData&&0!==this.currentData.length?this.parseObservationData(this.currentData[0]):null}}"undefined"!=typeof window&&(window.Observations=Observations);class BightWatchApp{constructor(){this.currentRegion=null,this.zones=null,this.endpoints=null,this.widgets={},this.statusBar=null,this.updateInterval=null,this.init()}async init(){try{this.showStatus("Initializing Bight Watch...","loading"),await this.loadConfig(),this.initializeUI(),this.loadPreferences(),this.setupEventListeners(),this.startUpdateCycle(),this.showStatus("Ready","success")}catch(t){console.error("App initialization failed:",t),this.showStatus("Initialization failed","error")}}async loadConfig(){try{const[t,e]=await Promise.all([window.BightWatch.http.get("./data/zones.json",{cacheTTL:1440}),window.BightWatch.http.get("./data/endpoints.json",{cacheTTL:1440})]);this.zones="string"==typeof t?JSON.parse(t):t,this.endpoints="string"==typeof e?JSON.parse(e):e}catch(t){throw console.error("Failed to load configuration:",t),new Error("Configuration loading failed")}}initializeUI(){this.statusBar=document.getElementById("status-bar"),this.widgets={locationSelector:new LocationSelector(this.zones,this.onZoneSelected.bind(this)),forecastSummary:new ForecastSummary,discussion:new Discussion,alerts:new Alerts,tides:new Tides,observations:new Observations},console.log("UI components initialized")}loadPreferences(){try{const t=localStorage.getItem("bightwatch_selected_region");t&&this.zones.regions&&this.zones.regions[t]&&(this.currentRegion=t,this.widgets.locationSelector.setSelected(t),this.loadRegionForecastData(t))}catch(t){console.warn("Failed to load preferences:",t)}}setupEventListeners(){document.addEventListener("visibilitychange",()=>{document.hidden?this.stopUpdateCycle():this.startUpdateCycle()}),window.addEventListener("online",()=>{this.showStatus("Back online","success"),this.currentZone&&this.loadForecastData(this.currentZone)}),window.addEventListener("offline",()=>{this.showStatus("Offline - using cached data","warning")}),window.addEventListener("beforeunload",()=>{this.stopUpdateCycle()})}onZoneSelected(t){if(console.log(`Region selected: ${t}, current region: ${this.currentRegion}`),t!==this.currentRegion){this.currentRegion=t,console.log(`Loading new region: ${t}`);try{localStorage.setItem("bightwatch_selected_region",t)}catch(t){console.warn("Failed to save region preference:",t)}this.loadRegionForecastData(t)}else console.log("Same region selected, skipping reload")}async loadRegionForecastData(t){if(!t||!this.zones.regions[t])return void console.error("Invalid region ID:",t);const e=this.zones.regions[t];this.showStatus(`Loading forecast for ${e.name}...`,"loading");try{const s=await this.loadRegionForecast(t,e);this.widgets.forecastSummary.updateRegion(e,s);const n=[this.loadDiscussion(e.office).catch(t=>(console.warn("Discussion loading failed:",t),{error:"Discussion not available",type:"discussion"})),this.loadAlerts().catch(t=>(console.warn("Alerts loading failed:",t),{features:[],error:"Alerts not available",type:"alerts"})),this.loadTides(t).catch(t=>(console.warn("Tides loading failed:",t),{error:"Tide data not available",type:"tides"})),this.loadObservations(t).catch(t=>(console.warn("Observations loading failed:",t),{error:"Observation data not available",type:"observations"}))];(await Promise.allSettled(n)).forEach((t,e)=>{const s=["Discussion","Alerts","Tides","Observations"];if(console.log(`Widget ${e} (${s[e]}): status=${t.status}, value=`,t.value),"fulfilled"===t.status&&t.value&&!t.value.error)switch(e){case 0:this.widgets.discussion.update(t.value),console.log("Updated discussion widget");break;case 1:this.widgets.alerts.update(t.value),console.log("Updated alerts widget");break;case 2:this.widgets.tides.update(t.value),console.log("Updated tides widget");break;case 3:this.widgets.observations.update(t.value),console.log("Updated observations widget")}else{const n=t.value?.error||t.reason||"Data not available";switch(console.warn(`Failed to load data for widget ${e} (${s[e]}):`,n),e){case 0:this.widgets.discussion.showError("Discussion not available - using cached forecast data");break;case 1:this.widgets.alerts.showNoAlerts();break;case 2:this.widgets.tides.showDefault();break;case 3:this.widgets.observations.showError("Observation data not available - check individual buoy websites")}}}),this.showStatus(`Loaded forecast for ${e.name}`,"success")}catch(t){console.error("Failed to load forecast data:",t),this.showStatus("Failed to load forecast","error")}}async loadRegionForecast(t,e){const s=`${window.location.origin}/.netlify/functions/marine-forecast/${Object.keys(e.zones)[0].toUpperCase()}`;try{console.log(`Fetching forecast for region ${t} via proxy:`,s);const e=await window.BightWatch.http.get(s,{cacheTTL:5,skipCache:!0});if(console.log(`Proxy request succeeded for ${t}:`,e),e.properties&&e.properties.periods)return e;throw new Error("No forecast data in proxy response")}catch(t){throw console.error("Proxy request failed:",t),new Error("Marine forecast data not available via proxy")}}parseNOAATextForecast(t){const e=t.split("\n"),s=[];let n=null,i="",r="";for(let t=0;t<e.length;t++){const o=e[t].trim();if(o.includes("PKZ")&&o.includes("-")){const s=e[t+1]?.trim();!s||s.includes("PM")||s.includes("AM")||(i=s)}if((o.includes("PM AKDT")||o.includes("AM AKDT"))&&(r=o),o.startsWith(".")&&o.includes("...")){n&&s.push(n);n={name:o.replace(/^\./,"").replace(/\.\.\.$/,"").trim(),text:"",stationName:i,issueTime:r}}else n&&o&&!o.includes("$$")&&!o.includes("Expires:")&&(n.text+=(n.text?" ":"")+o)}return n&&s.push(n),s}parseNWSWind(t){const e=t.match(/(\w+)\s+wind(?:s)?\s+(\d+)(?:\s*to\s*(\d+))?\s*(?:mph|knots?)/i);if(e){const t=e[1].toUpperCase(),s=parseInt(e[2]),n=e[3]?parseInt(e[3]):null;return{direction:t,directionName:this.getWindDirectionName(t),speed:s,maxSpeed:n,description:this.getWindDescription(s)}}return null}parseNWSWaves(t){const e=t.match(/(?:waves?|seas?)\s+(\d+)(?:\s*to\s*(\d+))?\s*(?:feet|ft)/i);if(e){const t=parseInt(e[1]);return{height:t,maxHeight:e[2]?parseInt(e[2]):null,description:this.getWaveDescription(t)}}return null}parseNWSWeather(t){const e=["rain","showers","thunderstorms","fog","snow","clear","cloudy","sunny"].filter(e=>t.toLowerCase().includes(e));return e.length>0?{conditions:e,description:e.join(", ")}:null}getWindDirectionName(t){return{N:"North",NE:"Northeast",E:"East",SE:"Southeast",S:"South",SW:"Southwest",W:"West",NW:"Northwest"}[t.toUpperCase()]||t}getWindDescription(t){return t<7?"Light":t<17?"Moderate":t<27?"Fresh":t<34?"Strong":"Gale"}getWaveDescription(t){return t<2?"Calm":t<4?"Light":t<6?"Moderate":t<10?"Rough":"Very rough"}async loadDiscussion(t){const e=this.endpoints.discussion,s=e.baseUrl+e.format.replace("{office}",t.toUpperCase());try{const e=await window.BightWatch.http.get(s,{cacheTTL:180}),n=e.features&&e.features.length>0?e.features[0]:null;if(n)return{office:t,text:n.properties.productText,issued:new Date(n.properties.issuanceTime)};throw new Error("No AFD products found")}catch(t){throw console.error("Failed to load discussion:",t),new Error("Forecast discussion not available")}}async loadAlerts(){const t=this.endpoints.alerts,e=t.baseUrl+t.format;try{return await window.BightWatch.http.get(e,{cacheTTL:10})}catch(t){return console.error("Failed to load alerts:",t),{features:[]}}}async loadTides(t){const e=this.getTideStation(t);if(!e)throw new Error("No tide station mapped for this zone");const s=this.endpoints.tides,n=(new Date).toISOString().split("T")[0].replace(/-/g,""),i=s.baseUrl+s.format.replace(/{date}/g,n).replace(/{station}/g,e);try{return await window.BightWatch.http.get(i,{cacheTTL:1440})}catch(t){throw console.error("Failed to load tides:",t),new Error("Tide data not available")}}async loadObservations(t){const e=this.getBuoyStations(t);if(!e||0===e.length)throw new Error("No buoy stations mapped for this zone");const s=this.endpoints.buoy,n=e.map(t=>{const e=s.baseUrl+s.format.replace("{station}",t);return window.BightWatch.http.get(e,{cacheTTL:10})});try{const t=await Promise.allSettled(n);return t.filter(t=>"fulfilled"===t.status).map(t=>t.value)}catch(t){throw console.error("Failed to load observations:",t),new Error("Observation data not available")}}getTideStation(t){return{PKZ011:"9452400",PKZ012:"9451054",PKZ013:"9451054",PKZ125:"9454050",PKZ126:"9452400",PKZ127:"9452400",PKZ128:"9451054",PKZ129:"9452400",PKZ130:"9452400",PKZ131:"9452400",PKZ150:"9453220",PKZ170:"9455920",PKZ171:"9459450",PKZ172:"9453220",PKZ173:"9453220",PKZ174:"9453220"}[t]||null}getBuoyStations(t){return{PKZ011:["46082"],PKZ012:["46082"],PKZ013:["46082"],PKZ021:["46060"],PKZ022:["46060"],PKZ031:["46001"],PKZ032:["46001"],PKZ033:["46001"],PKZ034:["46001"],PKZ035:["46001"]}[t]||[]}startUpdateCycle(){this.updateInterval&&clearInterval(this.updateInterval),this.updateInterval=setInterval(()=>{this.currentRegion&&!document.hidden&&this.loadRegionForecastData(this.currentRegion)},18e5)}stopUpdateCycle(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null)}showStatus(t,e="info"){if(!this.statusBar)return;const s=this.statusBar.querySelector(".status-text"),n=this.statusBar.querySelector(".status-indicator");s&&(s.textContent=t),n&&(n.className=`status-indicator ${e}`),"success"===e&&setTimeout(()=>{s&&(s.textContent="Ready"),n&&(n.className="status-indicator")},3e3)}getStats(){return{currentRegion:this.currentRegion,totalRegions:Object.keys(this.zones?.regions||{}).length,cache:window.BightWatch.cache.getStats(),lastUpdate:(new Date).toISOString()}}}document.addEventListener("DOMContentLoaded",()=>{window.BightWatch=window.BightWatch||{},window.BightWatch.app=new BightWatchApp}),window.addEventListener("unhandledrejection",t=>{console.error("Unhandled promise rejection:",t.reason),window.BightWatch&&window.BightWatch.app&&window.BightWatch.app.showStatus("An error occurred","error")}),"undefined"!=typeof module&&module.exports&&(module.exports=BightWatchApp);